var EC = (function (exports) {
'use strict';

function Individual(genomeSize) {
  this.fitness = 0;
  this.evaluated = false;
  this.genomes = genomeSize>0 ? new Array(genomeSize) : [];
}

// Object.defineProperties(Individual.prototype, {
//   "fitness" : {
//     get: function() {
//       return this.fitness;
//     },
//     set: function(value) {
//       this.fitness = value;
//     } 
//   },
//   "evaluated" : {
//     get: function() {
//       return this.evaluated;
//     },
//     set: function(value) {
//       this.evaluated = value;
//     }
//   },
//   "genomes" : {
//     get: function() {
//       return this.genomes;
//     },
//     set: function(value) {
//       this.genomes = value;
//     }
//   }
// });

Object.assign( Individual.prototype, {
  isIndividual: true,
  clone: function() {
    var ind = new this.constructor();
    ind.fitness = this.fitness;
    ind.evaluated = this.evaluated;
    ind.genomes = this.genomes.slice(0);
    return ind;
  }
});

function Problem() {
  this.maxGeneration = 100;
  this.bestIndividual = null;
  this.numIndividuals = 10;
  this.genomeSize = 10;
  this.populations = [];
  this.generation = 0;
}

Object.assign(Problem.prototype, {
  initPopulation: function() {
    for(var i=0;i<this.numIndividuals;++i){
      var ind = new Individual(this.genomeSize);
      for(var j=0;j<ind.genomes.length;++j){
        ind.genomes[j] = Math.random();
      }
      this.populations.push(ind);
    }
  },
  testMethod: function() {
    console.log("testMethod in Problem.js");
  },
  run: function(){
    this.testMethod();
  }
});

exports.Individual = Individual;
exports.Problem = Problem;

return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvSW5kaXZpZHVhbC5qcyIsIi4uL3NyYy9Qcm9ibGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEluZGl2aWR1YWwoZ2Vub21lU2l6ZSkge1xuICB0aGlzLmZpdG5lc3MgPSAwO1xuICB0aGlzLmV2YWx1YXRlZCA9IGZhbHNlO1xuICB0aGlzLmdlbm9tZXMgPSBnZW5vbWVTaXplPjAgPyBuZXcgQXJyYXkoZ2Vub21lU2l6ZSkgOiBbXTtcbn1cblxuLy8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoSW5kaXZpZHVhbC5wcm90b3R5cGUsIHtcbi8vICAgXCJmaXRuZXNzXCIgOiB7XG4vLyAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmZpdG5lc3M7XG4vLyAgICAgfSxcbi8vICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4vLyAgICAgICB0aGlzLmZpdG5lc3MgPSB2YWx1ZTtcbi8vICAgICB9IFxuLy8gICB9LFxuLy8gICBcImV2YWx1YXRlZFwiIDoge1xuLy8gICAgIGdldDogZnVuY3Rpb24oKSB7XG4vLyAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZWQ7XG4vLyAgICAgfSxcbi8vICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4vLyAgICAgICB0aGlzLmV2YWx1YXRlZCA9IHZhbHVlO1xuLy8gICAgIH1cbi8vICAgfSxcbi8vICAgXCJnZW5vbWVzXCIgOiB7XG4vLyAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmdlbm9tZXM7XG4vLyAgICAgfSxcbi8vICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4vLyAgICAgICB0aGlzLmdlbm9tZXMgPSB2YWx1ZTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH0pO1xuXG5PYmplY3QuYXNzaWduKCBJbmRpdmlkdWFsLnByb3RvdHlwZSwge1xuICBpc0luZGl2aWR1YWw6IHRydWUsXG4gIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5kID0gbmV3IHRoaXMuY29uc3RydWN0b3IoKTtcbiAgICBpbmQuZml0bmVzcyA9IHRoaXMuZml0bmVzcztcbiAgICBpbmQuZXZhbHVhdGVkID0gdGhpcy5ldmFsdWF0ZWQ7XG4gICAgaW5kLmdlbm9tZXMgPSB0aGlzLmdlbm9tZXMuc2xpY2UoMCk7XG4gICAgcmV0dXJuIGluZDtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IEluZGl2aWR1YWwgfTsiLCJpbXBvcnQgeyBJbmRpdmlkdWFsIH0gZnJvbSAnLi9JbmRpdmlkdWFsLmpzJ1xuXG5mdW5jdGlvbiBQcm9ibGVtKCkge1xuICB0aGlzLm1heEdlbmVyYXRpb24gPSAxMDA7XG4gIHRoaXMuYmVzdEluZGl2aWR1YWwgPSBudWxsO1xuICB0aGlzLm51bUluZGl2aWR1YWxzID0gMTA7XG4gIHRoaXMuZ2Vub21lU2l6ZSA9IDEwO1xuICB0aGlzLnBvcHVsYXRpb25zID0gW107XG4gIHRoaXMuZ2VuZXJhdGlvbiA9IDA7XG59XG5cbk9iamVjdC5hc3NpZ24oUHJvYmxlbS5wcm90b3R5cGUsIHtcbiAgaW5pdFBvcHVsYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGZvcih2YXIgaT0wO2k8dGhpcy5udW1JbmRpdmlkdWFsczsrK2kpe1xuICAgICAgdmFyIGluZCA9IG5ldyBJbmRpdmlkdWFsKHRoaXMuZ2Vub21lU2l6ZSk7XG4gICAgICBmb3IodmFyIGo9MDtqPGluZC5nZW5vbWVzLmxlbmd0aDsrK2ope1xuICAgICAgICBpbmQuZ2Vub21lc1tqXSA9IE1hdGgucmFuZG9tKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBvcHVsYXRpb25zLnB1c2goaW5kKTtcbiAgICB9XG4gIH0sXG4gIHRlc3RNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKFwidGVzdE1ldGhvZCBpbiBQcm9ibGVtLmpzXCIpO1xuICB9LFxuICBydW46IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy50ZXN0TWV0aG9kKCk7XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBQcm9ibGVtIH07Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVMsVUFBVSxDQUFDLFVBQVUsRUFBRTtFQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztFQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQzFEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCRCxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTLEVBQUU7RUFDbkMsWUFBWSxFQUFFLElBQUk7RUFDbEIsS0FBSyxFQUFFLFdBQVc7SUFDaEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzNCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMvQixHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sR0FBRyxDQUFDO0dBQ1o7Q0FDRixDQUFDLENBQUM7O0FDeENILFNBQVMsT0FBTyxHQUFHO0VBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO0VBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0VBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0VBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0VBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0NBQ3JCOztBQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtFQUMvQixjQUFjLEVBQUUsV0FBVztJQUN6QixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUNwQyxJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7TUFDMUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ2hDO01BQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7R0FDRjtFQUNELFVBQVUsRUFBRSxXQUFXO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztHQUN6QztFQUNELEdBQUcsRUFBRSxVQUFVO0lBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0dBQ25CO0NBQ0YsQ0FBQyxDQUFDOzs7Ozs7Ozs7OzsifQ==
